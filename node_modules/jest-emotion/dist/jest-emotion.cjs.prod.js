"use strict";
function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}
Object.defineProperty(exports, "__esModule", { value: !0 });
var chalk = _interopDefault(require("chalk")),
  css = require("css");
function defaultClassNameReplacer(className, index) {
  return "emotion-" + index;
}
var componentSelectorClassNamePattern = /^e[a-zA-Z0-9]+[0-9]+$/,
  replaceClassNames = function(
    classNames,
    styles,
    code,
    keys,
    classNameReplacer
  ) {
    void 0 === classNameReplacer &&
      (classNameReplacer = defaultClassNameReplacer);
    var index = 0,
      keyPattern = new RegExp("^(" + keys.join("|") + ")-");
    return classNames.reduce(function(acc, className) {
      if (
        keyPattern.test(className) ||
        componentSelectorClassNamePattern.test(className)
      ) {
        var escapedRegex = new RegExp(
          className.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"),
          "g"
        );
        return acc.replace(escapedRegex, classNameReplacer(className, index++));
      }
      return acc;
    }, styles + (styles ? "\n\n" : "") + code);
  },
  RULE_TYPES = { media: "media", rule: "rule" };
function getClassNames(selectors, classes) {
  return classes ? selectors.concat(classes.split(" ")) : selectors;
}
function getClassNamesFromTestRenderer(selectors, _ref) {
  var _ref$props = _ref.props,
    props = void 0 === _ref$props ? {} : _ref$props;
  return getClassNames(selectors, props.className || props.class);
}
function shouldDive(node) {
  return "function" == typeof node.dive && "string" != typeof node.type();
}
function isTagWithClassName(node) {
  return node.prop("className") && "string" == typeof node.type();
}
function getClassNamesFromEnzyme(selectors, node) {
  var components = (shouldDive(node) ? node.dive() : node).findWhere(
    isTagWithClassName
  );
  return getClassNames(
    selectors,
    components.length && components.first().prop("className")
  );
}
function getClassNamesFromCheerio(selectors, node) {
  return getClassNames(selectors, node.attr("class"));
}
function getClassNamesFromDOMElement(selectors, node) {
  return getClassNames(selectors, node.getAttribute("class"));
}
function isReactElement(val) {
  return val.$$typeof === Symbol.for("react.test.json");
}
var domElementPattern = /^((HTML|SVG)\w*)?Element$/;
function isDOMElement(val) {
  return (
    1 === val.nodeType &&
    val.constructor &&
    val.constructor.name &&
    domElementPattern.test(val.constructor.name)
  );
}
function isEnzymeElement(val) {
  return "function" == typeof val.findWhere;
}
function isCheerioElement(val) {
  return "[cheerio object]" === val.cheerio;
}
function getClassNamesFromNodes(nodes) {
  return nodes.reduce(function(selectors, node) {
    return isReactElement(node)
      ? getClassNamesFromTestRenderer(selectors, node)
      : isEnzymeElement(node)
        ? getClassNamesFromEnzyme(selectors, node)
        : isCheerioElement(node)
          ? getClassNamesFromCheerio(selectors, node)
          : getClassNamesFromDOMElement(selectors, node);
  }, []);
}
var keyframesPattern = /^@keyframes\s+(animation-[^{\s]+)+/,
  removeCommentPattern = /\/\*[\s\S]*?\*\//g;
function getStylesFromClassNames(classNames, elements) {
  if (!classNames.length) return "";
  var keys = getKeys(elements);
  if (!keys.length) return "";
  var keyPatten = new RegExp("^(" + keys.join("|") + ")-"),
    filteredClassNames = classNames.filter(function(className) {
      return keyPatten.test(className);
    });
  if (!filteredClassNames.length) return "";
  var selectorPattern = new RegExp("\\.(" + filteredClassNames.join("|") + ")"),
    keyframes = {},
    styles = "";
  elements.forEach(function(element) {
    var rule = element.textContent || "";
    selectorPattern.test(rule) && (styles += rule);
    var match = rule.match(keyframesPattern);
    if (null !== match) {
      var name = match[1];
      void 0 === keyframes[name] && (keyframes[name] = ""),
        (keyframes[name] += rule);
    }
  });
  var keyframeNameKeys = Object.keys(keyframes),
    keyframesStyles = "";
  if (keyframeNameKeys.length) {
    var keyframesNamePattern = new RegExp(keyframeNameKeys.join("|"), "g"),
      keyframesNameCache = {},
      index = 0;
    (styles = styles.replace(keyframesNamePattern, function(name) {
      return (
        void 0 === keyframesNameCache[name] &&
          ((keyframesNameCache[name] = "animation-" + index++),
          (keyframesStyles += keyframes[name])),
        keyframesNameCache[name]
      );
    })),
      (keyframesStyles = keyframesStyles.replace(keyframesNamePattern, function(
        value
      ) {
        return keyframesNameCache[value];
      }));
  }
  return (keyframesStyles + styles).replace(removeCommentPattern, "");
}
function getStyleElements() {
  return Array.from(document.querySelectorAll("style[data-emotion]"));
}
var unique = function(arr) {
  return Array.from(new Set(arr));
};
function getKeys(elements) {
  return unique(
    elements.map(function(element) {
      return element.getAttribute("data-emotion");
    })
  ).filter(Boolean);
}
function hasClassNames(classNames, selectors, target) {
  return selectors.some(function(selector) {
    return target
      ? selector.includes(target)
      : classNames.includes(selector.slice(1));
  });
}
function getMediaRules(rules, media) {
  return rules
    .filter(function(rule) {
      var isMediaMatch =
        !!rule.media &&
        rule.media.replace(/\s/g, "").includes(media.replace(/\s/g, ""));
      return rule.type === RULE_TYPES.media && isMediaMatch;
    })
    .reduce(function(mediaRules, mediaRule) {
      return mediaRules.concat(mediaRule.rules);
    }, []);
}
function isA(typeName, value) {
  return Object.prototype.toString.apply(value) === "[object " + typeName + "]";
}
function isAsymmetric(obj) {
  return obj && isA("Function", obj.asymmetricMatch);
}
function valueMatches(declaration, value) {
  return value instanceof RegExp
    ? value.test(declaration.value)
    : isAsymmetric(value)
      ? value.asymmetricMatch(declaration.value)
      : value === declaration.value;
}
function toHaveStyleRule(received, property, value, options) {
  void 0 === options && (options = {});
  var _options = options,
    target = _options.target,
    media = _options.media,
    classNames = getClassNamesFromNodes([received]),
    cssString = getStylesFromClassNames(classNames, getStyleElements()),
    preparedRules = css.parse(cssString).stylesheet.rules;
  media && (preparedRules = getMediaRules(preparedRules, media));
  var declaration = preparedRules
    .filter(function(rule) {
      return (
        rule.type === RULE_TYPES.rule &&
        hasClassNames(classNames, rule.selectors, target)
      );
    })
    .reduce(function(decs, rule) {
      return decs.concat(rule.declarations);
    }, [])
    .filter(function(dec) {
      return "declaration" === dec.type && dec.property === property;
    })
    .pop();
  if (!declaration)
    return {
      pass: !1,
      message: function() {
        return "Property not found: " + property;
      }
    };
  var pass = valueMatches(declaration, value);
  return {
    pass: pass,
    message: function() {
      return (
        "Expected " +
        property +
        (pass ? " not " : " ") +
        "to match:\n  " +
        chalk.green(value) +
        "\nReceived:\n  " +
        chalk.red(declaration.value)
      );
    }
  };
}
var matchers = { toHaveStyleRule: toHaveStyleRule };
function getNodes(node, nodes) {
  if ((void 0 === nodes && (nodes = []), node.children)) {
    var _iterator = node.children,
      _isArray = Array.isArray(_iterator),
      _i = 0;
    for (_iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        if ((_i = _iterator.next()).done) break;
        _ref = _i.value;
      }
      getNodes(_ref, nodes);
    }
  }
  return "object" == typeof node && nodes.push(node), nodes;
}
function getPrettyStylesFromClassNames(classNames, elements) {
  var prettyStyles,
    styles = getStylesFromClassNames(classNames, elements);
  try {
    prettyStyles = css.stringify(css.parse(styles));
  } catch (e) {
    throw (console.error(e),
    new Error(
      'There was an error parsing the following css: "' + styles + '"'
    ));
  }
  return prettyStyles;
}
function createSerializer(_temp) {
  var _ref2 = void 0 === _temp ? {} : _temp,
    classNameReplacer = _ref2.classNameReplacer,
    _ref2$DOMElements = _ref2.DOMElements,
    DOMElements = void 0 === _ref2$DOMElements || _ref2$DOMElements,
    cache = new WeakSet();
  return {
    test: function(val) {
      return (
        val &&
        !cache.has(val) &&
        (isReactElement(val) || (DOMElements && isDOMElement(val)))
      );
    },
    print: function(val, printer) {
      var nodes = getNodes(val),
        classNames = getClassNamesFromNodes(nodes),
        elements = getStyleElements(),
        styles = getPrettyStylesFromClassNames(classNames, elements);
      nodes.forEach(cache.add, cache);
      var printedVal = printer(val);
      nodes.forEach(cache.delete, cache);
      var keys = getKeys(elements);
      return replaceClassNames(
        classNames,
        styles,
        printedVal,
        keys,
        classNameReplacer
      );
    }
  };
}
var _createSerializer = createSerializer(),
  print = _createSerializer.print,
  test = _createSerializer.test,
  index = { print: print, test: test };
(exports.createSerializer = createSerializer),
  (exports.print = print),
  (exports.test = test),
  (exports.default = index),
  (exports.matchers = matchers);
